import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { toast } from 'sonner';
import Icon from '@/components/ui/icon';
import { RUSSIAN_CITIES, City } from '@/data/russian-cities';
import AppSidebar from '@/components/layout/AppSidebar';

const API_URL = 'https://functions.poehali.dev/06df3397-13af-46f0-946a-f5d38aa6f60f';

type Step = 'source' | 'cities' | 'goal' | 'intents' | 'processing' | 'results';
type Source = 'manual' | 'website';
type Goal = 'context' | 'seo';

interface Phrase {
  phrase: string;
  count: number;
}

interface Cluster {
  name: string;
  intent: string;
  color: string;
  icon: string;
  phrases: Phrase[];
}

const INTENT_TYPES = [
  { id: 'commercial', label: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ', description: '–∫—É–ø–∏—Ç—å, –∑–∞–∫–∞–∑–∞—Ç—å, —Ü–µ–Ω–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å', emoji: 'üí∞' },
  { id: 'informational', label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ', description: '–∫–∞–∫, —á—Ç–æ —Ç–∞–∫–æ–µ, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø–æ—à–∞–≥–æ–≤–æ', emoji: 'üìö' },
  { id: 'navigational', label: '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ', description: '—Ü–∏–∞–Ω, –∞–≤–∏—Ç–æ, –¥–æ–º–∫–ª–∏–∫, —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏', emoji: 'üß≠' },
  { id: 'transactional', label: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ', description: '—Å–∫–∞—á–∞—Ç—å, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∑–∞—è–≤–∫–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', emoji: 'üìù' }
];

const PROCESSING_STAGES = [
  { label: '–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑...', duration: 1500 },
  { label: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–æ–≤...', duration: 2000 },
  { label: '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä—ã...', duration: 2500 },
  { label: '–í—ã–¥–µ–ª–µ–Ω–∏–µ –º–∏–Ω—É—Å-—Å–ª–æ–≤...', duration: 1500 },
  { label: '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...', duration: 1000 }
];

const CLUSTER_STYLES = [
  { bg: 'bg-slate-50', border: 'border-slate-200', headerBg: 'bg-white', iconBg: 'bg-emerald-100', iconColor: 'text-emerald-600' },
  { bg: 'bg-slate-50', border: 'border-slate-200', headerBg: 'bg-white', iconBg: 'bg-teal-100', iconColor: 'text-teal-600' },
  { bg: 'bg-slate-50', border: 'border-slate-200', headerBg: 'bg-white', iconBg: 'bg-green-100', iconColor: 'text-green-600' },
  { bg: 'bg-slate-50', border: 'border-slate-200', headerBg: 'bg-white', iconBg: 'bg-lime-100', iconColor: 'text-lime-600' },
];

const mockClusters: Cluster[] = [
  {
    name: '–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ä—ã–Ω–æ–∫',
    intent: 'commercial',
    color: 'blue',
    icon: 'Home',
    phrases: [
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤—Ç–æ—Ä–∏—á–∫—É', count: 12000 },
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤—Ç–æ—Ä–∏—á–Ω—ã–π —Ä—ã–Ω–æ–∫', count: 3800 },
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞', count: 11000 },
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤', count: 14000 }
    ]
  },
  {
    name: '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞',
    intent: 'commercial',
    color: 'emerald',
    icon: 'Building2',
    phrases: [
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞', count: 8500 },
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', count: 15000 },
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É —É –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞', count: 11000 },
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Ä—ã–Ω–∫–µ', count: 6800 }
    ]
  },
  {
    name: '–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –∏ –ø–ª–æ—â–∞–¥–∫–∏',
    intent: 'navigational',
    color: 'purple',
    icon: 'Globe',
    phrases: [
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –∞–≤–∏—Ç–æ', count: 19000 },
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É —Ü–∏–∞–Ω', count: 16500 },
      { phrase: '–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–æ–º–∫–ª–∏–∫', count: 8200 }
    ]
  }
];

const mockMinusWords = ['–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–¥–∞—Ä–æ–º', '–∏–≥—Ä–∞', '–≤ –∏–≥—Ä–µ', '—Å–∫–∞—á–∞—Ç—å', '—Ç–æ—Ä—Ä–µ–Ω—Ç', '–ø–æ—Ä–Ω–æ', 'xxx', '–≤–∞–∫–∞–Ω—Å–∏—è', '—Ä–∞–±–æ—Ç–∞'];

export default function TestClustering() {
  const { projectId } = useParams<{ projectId: string }>();
  const navigate = useNavigate();
  const [step, setStep] = useState<Step>('source');
  const [source, setSource] = useState<Source>('manual');
  const [manualKeywords, setManualKeywords] = useState('');
  const [websiteUrl, setWebsiteUrl] = useState('');
  const [selectedCities, setSelectedCities] = useState<City[]>([RUSSIAN_CITIES[0]]);
  const [citySearch, setCitySearch] = useState('');
  const [goal, setGoal] = useState<Goal>('context');
  const [selectedIntents, setSelectedIntents] = useState<string[]>(['commercial', 'transactional']);
  const [processingProgress, setProcessingProgress] = useState(0);
  const [currentStage, setCurrentStage] = useState(0);
  const [clusters, setClusters] = useState<Cluster[]>([]);
  const [minusWords, setMinusWords] = useState<string[]>([]);
  const [renderKey, setRenderKey] = useState(0);
  const [projectName, setProjectName] = useState('');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchProject = async () => {
      if (!projectId) {
        setIsLoading(false);
        return;
      }

      const userId = localStorage.getItem('userId');
      if (!userId) {
        toast.error('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        navigate('/');
        return;
      }

      try {
        setIsLoading(true);
        const response = await fetch(`${API_URL}?endpoint=projects&id=${projectId}`, {
          headers: {
            'X-User-Id': userId
          }
        });

        if (!response.ok) {
          throw new Error('Failed to fetch project');
        }

        const project = await response.json();
        
        if (project) {
          setProjectName(project.name || '');
          
          // Check if results exist
          if (project.results && project.results.clusters && project.results.clusters.length > 0) {
            setClusters(project.results.clusters);
            setMinusWords(project.results.minusWords || []);
            setStep('results');
          }
        }
      } catch (error) {
        console.error('Error fetching project:', error);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç');
      } finally {
        setIsLoading(false);
      }
    };

    fetchProject();
  }, [projectId, navigate]);

  const saveResultsToAPI = async (clustersData: Cluster[], minusWordsData: string[]) => {
    if (!projectId) return;

    const userId = localStorage.getItem('userId');
    if (!userId) {
      toast.error('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    try {
      const totalPhrases = clustersData.reduce((sum, c) => sum + c.phrases.length, 0);
      
      const response = await fetch(`${API_URL}?endpoint=projects`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-User-Id': userId
        },
        body: JSON.stringify({
          id: projectId,
          results: {
            clusters: clustersData,
            minusWords: minusWordsData
          },
          keywordsCount: totalPhrases,
          clustersCount: clustersData.length,
          minusWordsCount: minusWordsData.length
        })
      });

      if (!response.ok) {
        throw new Error('Failed to save results');
      }

      const result = await response.json();
      console.log('Results saved successfully:', result);
    } catch (error) {
      console.error('Error saving results:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    }
  };

  const filteredCities = RUSSIAN_CITIES.filter(city => 
    city.name.toLowerCase().includes(citySearch.toLowerCase()) &&
    !selectedCities.find(c => c.id === city.id)
  );

  const addCity = (city: City) => {
    setSelectedCities([...selectedCities, city]);
    setCitySearch('');
  };

  const removeCity = (cityId: number) => {
    setSelectedCities(selectedCities.filter(c => c.id !== cityId));
  };

  const toggleIntent = (intentId: string) => {
    setSelectedIntents(prev => 
      prev.includes(intentId) 
        ? prev.filter(id => id !== intentId)
        : [...prev, intentId]
    );
  };

  useEffect(() => {
    if (step === 'processing') {
      let totalDuration = 0;
      let currentProgress = 0;

      PROCESSING_STAGES.forEach((stage, idx) => {
        setTimeout(() => {
          setCurrentStage(idx);
          const increment = 100 / PROCESSING_STAGES.length;
          currentProgress += increment;
          setProcessingProgress(Math.min(currentProgress, 100));

          if (idx === PROCESSING_STAGES.length - 1) {
            setTimeout(async () => {
              setClusters(mockClusters);
              setMinusWords(mockMinusWords);
              setRenderKey(prev => prev + 1);
              setStep('results');
              
              // Save results to API
              await saveResultsToAPI(mockClusters, mockMinusWords);
              
              toast.success('–ì–æ—Ç–æ–≤–æ! –ö–ª–∞—Å—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã, –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –≤—ã–¥–µ–ª–µ–Ω—ã');
            }, stage.duration);
          }
        }, totalDuration);
        totalDuration += stage.duration;
      });
    }
  }, [step]);

  const handleNext = () => {
    if (step === 'source') {
      if (source === 'manual' && !manualKeywords.trim()) {
        toast.error('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞');
        return;
      }
      if (source === 'website' && !websiteUrl.trim()) {
        toast.error('–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞');
        return;
      }
      setStep('cities');
    } else if (step === 'cities') {
      if (selectedCities.length === 0) {
        toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥');
        return;
      }
      setStep('goal');
    } else if (step === 'goal') {
      setStep('intents');
    } else if (step === 'intents') {
      if (selectedIntents.length === 0) {
        toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –∏–Ω—Ç–µ–Ω—Ç–∞');
        return;
      }
      setStep('processing');
    }
  };

  const handleBack = () => {
    if (step === 'cities') setStep('source');
    else if (step === 'goal') setStep('cities');
    else if (step === 'intents') setStep('goal');
  };

  const handleExport = (type: 'csv' | 'excel') => {
    if (type === 'csv') {
      let csv = '–ö–ª–∞—Å—Ç–µ—Ä,–ò–Ω—Ç–µ–Ω—Ç,–§—Ä–∞–∑–∞,–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å\n';
      clusters.forEach(cluster => {
        cluster.phrases.forEach(phrase => {
          csv += `"${cluster.name}","${cluster.intent}","${phrase.phrase}",${phrase.count}\n`;
        });
      });
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `clusters_${projectId || 'export'}.csv`;
      link.click();
      toast.success('CSV —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω');
    } else {
      toast.info('Excel —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }
  };

  const copyMinusWords = () => {
    navigator.clipboard.writeText(minusWords.join(' '));
    toast.success('–ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  if (isLoading) {
    return (
      <div className="flex h-screen bg-gray-50">
        <AppSidebar />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-gray-50">
      <AppSidebar />
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Header */}
        <header className="bg-white border-b border-gray-200 px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Button 
                variant="ghost" 
                size="icon"
                onClick={() => navigate('/clustering')}
              >
                <Icon name="ArrowLeft" className="h-5 w-5" />
              </Button>
              <div>
                <h1 className="text-xl font-semibold text-gray-900">
                  {projectName || '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'}
                </h1>
                <p className="text-sm text-gray-500">–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</p>
              </div>
            </div>
            {step !== 'processing' && step !== 'results' && (
              <div className="flex gap-2">
                {step !== 'source' && (
                  <Button variant="outline" onClick={handleBack}>
                    –ù–∞–∑–∞–¥
                  </Button>
                )}
                <Button onClick={handleNext}>
                  –î–∞–ª–µ–µ
                  <Icon name="ArrowRight" className="ml-2 h-4 w-4" />
                </Button>
              </div>
            )}
          </div>
        </header>

        {/* Main Content */}
        <main className="flex-1 overflow-y-auto p-6">
          {/* Source Step */}
          {step === 'source' && (
            <div className="max-w-2xl mx-auto space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö</CardTitle>
                  <CardDescription>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <button
                      onClick={() => setSource('manual')}
                      className={`p-4 border-2 rounded-lg transition-all ${
                        source === 'manual' 
                          ? 'border-blue-500 bg-blue-50' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <Icon name="FileText" className="h-8 w-8 mx-auto mb-2 text-blue-600" />
                      <div className="font-medium">–í—Ä—É—á–Ω—É—é</div>
                      <div className="text-sm text-gray-500">–í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                    </button>
                    
                    <button
                      onClick={() => setSource('website')}
                      className={`p-4 border-2 rounded-lg transition-all ${
                        source === 'website' 
                          ? 'border-blue-500 bg-blue-50' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <Icon name="Globe" className="h-8 w-8 mx-auto mb-2 text-blue-600" />
                      <div className="font-medium">–° —Å–∞–π—Ç–∞</div>
                      <div className="text-sm text-gray-500">–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</div>
                    </button>
                  </div>

                  {source === 'manual' && (
                    <div className="space-y-2">
                      <Label htmlFor="keywords">–ö–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã</Label>
                      <textarea
                        id="keywords"
                        className="w-full min-h-[200px] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)&#10;&#10;–ù–∞–ø—Ä–∏–º–µ—Ä:&#10;–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É&#10;–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –º–æ—Å–∫–≤–∞&#10;–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–µ–¥–æ—Ä–æ–≥–æ"
                        value={manualKeywords}
                        onChange={(e) => setManualKeywords(e.target.value)}
                      />
                      <p className="text-sm text-gray-500">
                        {manualKeywords.split('\n').filter(k => k.trim()).length} –∑–∞–ø—Ä–æ—Å–æ–≤
                      </p>
                    </div>
                  )}

                  {source === 'website' && (
                    <div className="space-y-2">
                      <Label htmlFor="website">URL —Å–∞–π—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞</Label>
                      <Input
                        id="website"
                        type="url"
                        placeholder="https://example.com"
                        value={websiteUrl}
                        onChange={(e) => setWebsiteUrl(e.target.value)}
                      />
                      <p className="text-sm text-gray-500">
                        –ú—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–π—Ç –∏ —Å–æ–±–µ—Ä—ë–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          )}

          {/* Cities Step */}
          {step === 'cities' && (
            <div className="max-w-2xl mx-auto space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–†–µ–≥–∏–æ–Ω—ã</CardTitle>
                  <CardDescription>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="city-search">–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞</Label>
                    <Input
                      id="city-search"
                      type="text"
                      placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞..."
                      value={citySearch}
                      onChange={(e) => setCitySearch(e.target.value)}
                    />
                  </div>

                  {citySearch && filteredCities.length > 0 && (
                    <div className="border border-gray-200 rounded-md max-h-48 overflow-y-auto">
                      {filteredCities.slice(0, 10).map(city => (
                        <button
                          key={city.id}
                          onClick={() => addCity(city)}
                          className="w-full px-4 py-2 text-left hover:bg-gray-50 border-b border-gray-100 last:border-0"
                        >
                          <div className="font-medium">{city.name}</div>
                          <div className="text-sm text-gray-500">{city.region}</div>
                        </button>
                      ))}
                    </div>
                  )}

                  <div className="space-y-2">
                    <Label>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ ({selectedCities.length})</Label>
                    <div className="flex flex-wrap gap-2">
                      {selectedCities.map(city => (
                        <Badge 
                          key={city.id} 
                          variant="secondary"
                          className="pl-3 pr-1 py-1"
                        >
                          {city.name}
                          <button
                            onClick={() => removeCity(city.id)}
                            className="ml-2 hover:text-red-600"
                          >
                            <Icon name="X" className="h-3 w-3" />
                          </button>
                        </Badge>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Goal Step */}
          {step === 'goal' && (
            <div className="max-w-2xl mx-auto space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–¶–µ–ª—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</CardTitle>
                  <CardDescription>–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-4">
                    <button
                      onClick={() => setGoal('context')}
                      className={`p-6 border-2 rounded-lg transition-all text-left ${
                        goal === 'context' 
                          ? 'border-blue-500 bg-blue-50' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <Icon name="Target" className="h-8 w-8 mb-3 text-blue-600" />
                      <div className="font-medium text-lg mb-2">–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞</div>
                      <div className="text-sm text-gray-500">
                        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –∏ Google Ads. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
                      </div>
                    </button>
                    
                    <button
                      onClick={() => setGoal('seo')}
                      className={`p-6 border-2 rounded-lg transition-all text-left ${
                        goal === 'seo' 
                          ? 'border-blue-500 bg-blue-50' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <Icon name="TrendingUp" className="h-8 w-8 mb-3 text-blue-600" />
                      <div className="font-medium text-lg mb-2">SEO –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ</div>
                      <div className="text-sm text-gray-500">
                        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞ –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.
                      </div>
                    </button>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Intents Step */}
          {step === 'intents' && (
            <div className="max-w-2xl mx-auto space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–¢–∏–ø—ã –∏–Ω—Ç–µ–Ω—Ç–æ–≤</CardTitle>
                  <CardDescription>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –∏–Ω—Ç–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {INTENT_TYPES.map(intent => (
                      <div
                        key={intent.id}
                        onClick={() => toggleIntent(intent.id)}
                        className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
                          selectedIntents.includes(intent.id)
                            ? 'border-blue-500 bg-blue-50'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="flex items-start gap-3">
                          <Checkbox 
                            checked={selectedIntents.includes(intent.id)}
                            className="mt-1"
                          />
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="text-xl">{intent.emoji}</span>
                              <span className="font-medium">{intent.label}</span>
                            </div>
                            <p className="text-sm text-gray-500">{intent.description}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Processing Step */}
          {step === 'processing' && (
            <div className="max-w-2xl mx-auto space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</CardTitle>
                  <CardDescription>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">
                        {PROCESSING_STAGES[currentStage]?.label}
                      </span>
                      <span className="font-medium">{Math.round(processingProgress)}%</span>
                    </div>
                    <Progress value={processingProgress} className="h-2" />
                  </div>

                  <div className="space-y-2">
                    {PROCESSING_STAGES.map((stage, idx) => (
                      <div
                        key={idx}
                        className={`flex items-center gap-3 p-3 rounded-lg ${
                          idx < currentStage
                            ? 'bg-green-50 text-green-700'
                            : idx === currentStage
                            ? 'bg-blue-50 text-blue-700'
                            : 'bg-gray-50 text-gray-400'
                        }`}
                      >
                        {idx < currentStage ? (
                          <Icon name="CheckCircle2" className="h-5 w-5" />
                        ) : idx === currentStage ? (
                          <div className="animate-spin">
                            <Icon name="Loader2" className="h-5 w-5" />
                          </div>
                        ) : (
                          <Icon name="Circle" className="h-5 w-5" />
                        )}
                        <span className="text-sm">{stage.label}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Results Step */}
          {step === 'results' && (
            <div key={renderKey} className="space-y-6 pb-8">
              {/* Stats */}
              <div className="grid grid-cols-3 gap-4">
                <Card className="relative overflow-hidden shadow-lg">
                  <div className="relative p-6 bg-white">
                    <Icon name="Layers" className="h-8 w-8 text-slate-500 mb-3" />
                    <div className="text-4xl font-bold text-slate-900 mb-2">{clusters.length}</div>
                    <div className="text-sm text-slate-600 font-medium">–ö–ª–∞—Å—Ç–µ—Ä–æ–≤</div>
                  </div>
                </Card>
                <Card className="relative overflow-hidden shadow-lg">
                  <div className="relative p-6 bg-white">
                    <Icon name="Key" className="h-8 w-8 text-slate-500 mb-3" />
                    <div className="text-4xl font-bold text-slate-900 mb-2">
                      {clusters.reduce((sum, c) => sum + c.phrases.length, 0)}
                    </div>
                    <div className="text-sm text-slate-600 font-medium">–ö–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑</div>
                  </div>
                </Card>
                <Card className="relative overflow-hidden shadow-lg">
                  <div className="relative p-6 bg-white">
                    <Icon name="Ban" className="h-8 w-8 text-slate-500 mb-3" />
                    <div className="text-4xl font-bold text-slate-900 mb-2">{minusWords.length}</div>
                    <div className="text-sm text-slate-600 font-medium">–ú–∏–Ω—É—Å-—Å–ª–æ–≤</div>
                  </div>
                </Card>
              </div>

              {/* Actions */}
              <div className="flex gap-3">
                <Button onClick={() => handleExport('csv')}>
                  <Icon name="Download" className="mr-2 h-4 w-4" />
                  –≠–∫—Å–ø–æ—Ä—Ç CSV
                </Button>
                <Button variant="outline" onClick={() => handleExport('excel')}>
                  <Icon name="FileSpreadsheet" className="mr-2 h-4 w-4" />
                  –≠–∫—Å–ø–æ—Ä—Ç Excel
                </Button>
                <Button variant="outline" onClick={copyMinusWords}>
                  <Icon name="Copy" className="mr-2 h-4 w-4" />
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞
                </Button>
              </div>

              {/* Clusters */}
              <div className="space-y-4">
                <h2 className="text-xl font-semibold">–ö–ª–∞—Å—Ç–µ—Ä—ã</h2>
                {clusters.map((cluster, idx) => {
                  const style = CLUSTER_STYLES[idx % CLUSTER_STYLES.length];
                  const intentType = INTENT_TYPES.find(i => i.id === cluster.intent);
                  
                  return (
                    <Card key={idx} className="border">
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <div className={`w-10 h-10 rounded-lg ${style.iconBg} flex items-center justify-center`}>
                              <Icon name={cluster.icon as any} className={`h-5 w-5 ${style.iconColor}`} />
                            </div>
                            <div>
                              <CardTitle className="text-lg">{cluster.name}</CardTitle>
                              <CardDescription>
                                {intentType?.emoji} {intentType?.label} ‚Ä¢ {cluster.phrases.length} —Ñ—Ä–∞–∑
                              </CardDescription>
                            </div>
                          </div>
                          <Badge variant="outline" className="text-xs">
                            {INTENT_TYPES.find(t => t.id === cluster.intent)?.label}
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent className="pt-4">
                        <div className="space-y-2">
                          {cluster.phrases.map((phrase, pIdx) => (
                            <div
                              key={pIdx}
                              className="flex items-center justify-between py-2 px-3 hover:bg-slate-50 rounded"
                            >
                              <span className="text-sm">{phrase.phrase}</span>
                              <Badge variant="outline" className="font-mono text-xs">
                                {phrase.count.toLocaleString()}
                              </Badge>
                            </div>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>

              {/* Minus Words */}
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle>–ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞</CardTitle>
                      <CardDescription>–°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–æ–∫–∞–∑–æ–≤</CardDescription>
                    </div>
                    <Button variant="outline" size="sm" onClick={copyMinusWords}>
                      <Icon name="Copy" className="mr-2 h-4 w-4" />
                      –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {minusWords.map((word, idx) => (
                      <Badge key={idx} variant="destructive">
                        {word}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </main>
      </div>
    </div>
  );
}