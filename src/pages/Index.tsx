import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import Icon from '@/components/ui/icon';

type Step = 'source' | 'cities' | 'goal' | 'intents' | 'results';
type Source = 'manual' | 'website';
type Goal = 'context' | 'seo';

interface City {
  id: number;
  name: string;
}

const RUSSIAN_CITIES: City[] = [
  { id: 213, name: '–ú–æ—Å–∫–≤–∞' },
  { id: 2, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
  { id: 54, name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
  { id: 65, name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
  { id: 35, name: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä' },
  { id: 172, name: '–£—Ñ–∞' },
  { id: 47, name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥' },
  { id: 72, name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫' },
  { id: 20, name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É' },
  { id: 63, name: '–°–∞–º–∞—Ä–∞' },
  { id: 56, name: '–ß–µ–ª—è–±–∏–Ω—Å–∫' },
  { id: 76, name: '–û–º—Å–∫' },
  { id: 11, name: '–ö–∞–∑–∞–Ω—å' }
];

const INTENT_TYPES = [
  { id: 'commercial', label: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ', description: '–∫—É–ø–∏—Ç—å, –∑–∞–∫–∞–∑–∞—Ç—å, —Ü–µ–Ω–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å', emoji: 'üí∞' },
  { id: 'informational', label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ', description: '–∫–∞–∫, —á—Ç–æ —Ç–∞–∫–æ–µ, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø–æ—à–∞–≥–æ–≤–æ', emoji: 'üìö' },
  { id: 'navigational', label: '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ', description: '—Ü–∏–∞–Ω, –∞–≤–∏—Ç–æ, –¥–æ–º–∫–ª–∏–∫, —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏', emoji: 'üß≠' },
  { id: 'transactional', label: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ', description: '—Å–∫–∞—á–∞—Ç—å, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∑–∞—è–≤–∫–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', emoji: 'üìù' }
];

export default function Index() {
  const [step, setStep] = useState<Step>('source');
  const [source, setSource] = useState<Source>('manual');
  const [manualKeywords, setManualKeywords] = useState('');
  const [websiteUrl, setWebsiteUrl] = useState('');
  const [selectedCities, setSelectedCities] = useState<City[]>([RUSSIAN_CITIES[0]]);
  const [citySearch, setCitySearch] = useState('');
  const [goal, setGoal] = useState<Goal>('context');
  const [selectedIntents, setSelectedIntents] = useState<string[]>(['commercial', 'transactional']);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const filteredCities = RUSSIAN_CITIES.filter(city => 
    city.name.toLowerCase().includes(citySearch.toLowerCase()) &&
    !selectedCities.find(c => c.id === city.id)
  );

  const addCity = (city: City) => {
    setSelectedCities([...selectedCities, city]);
    setCitySearch('');
  };

  const removeCity = (cityId: number) => {
    setSelectedCities(selectedCities.filter(c => c.id !== cityId));
  };

  const toggleIntent = (intentId: string) => {
    setSelectedIntents(prev => 
      prev.includes(intentId) 
        ? prev.filter(id => id !== intentId)
        : [...prev, intentId]
    );
  };

  const handleNext = () => {
    if (step === 'source') {
      if (source === 'manual' && !manualKeywords.trim()) {
        toast({ title: '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', variant: 'destructive' });
        return;
      }
      if (source === 'website' && !websiteUrl.trim()) {
        toast({ title: '–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞', variant: 'destructive' });
        return;
      }
      setStep('cities');
    } else if (step === 'cities') {
      if (selectedCities.length === 0) {
        toast({ title: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥', variant: 'destructive' });
        return;
      }
      setStep('goal');
    } else if (step === 'goal') {
      setStep('intents');
    } else if (step === 'intents') {
      if (selectedIntents.length === 0) {
        toast({ title: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–æ–≤', variant: 'destructive' });
        return;
      }
      handleGenerate();
    }
  };

  const handleGenerate = async () => {
    setLoading(true);
    toast({ 
      title: 'üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞–≥–∏—é...', 
      description: 'OpenAI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ –∏ —Å–æ–∑–¥–∞—ë—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã' 
    });

    setTimeout(() => {
      setLoading(false);
      setStep('results');
      toast({ 
        title: '‚úÖ –ì–æ—Ç–æ–≤–æ!', 
        description: '–ö–ª–∞—Å—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã, –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –≤—ã–¥–µ–ª–µ–Ω—ã' 
      });
    }, 2000);
  };

  const handleBack = () => {
    if (step === 'cities') setStep('source');
    else if (step === 'goal') setStep('cities');
    else if (step === 'intents') setStep('goal');
    else if (step === 'results') setStep('intents');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-4 md:p-8">
      <div className="max-w-3xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
            –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –∫–ª—é—á–µ–π
          </h1>
          <p className="text-muted-foreground">
            OpenAI —Å–æ–∑–¥–∞—Å—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã –∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
          </p>
        </div>

        <div className="mb-6 flex justify-center gap-2">
          {['source', 'cities', 'goal', 'intents', 'results'].map((s, idx) => (
            <div key={s} className="flex items-center">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                step === s ? 'bg-blue-600 text-white' : 
                ['source', 'cities', 'goal', 'intents', 'results'].indexOf(step) > idx ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-500'
              }`}>
                {['source', 'cities', 'goal', 'intents', 'results'].indexOf(step) > idx ? '‚úì' : idx + 1}
              </div>
              {idx < 4 && <div className={`w-8 h-0.5 ${
                ['source', 'cities', 'goal', 'intents', 'results'].indexOf(step) > idx ? 'bg-green-500' : 'bg-gray-200'
              }`} />}
            </div>
          ))}
        </div>

        <Card className="shadow-xl">
          {step === 'source' && (
            <>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon name="FileText" size={24} />
                  –û—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã?
                </CardTitle>
                <CardDescription>
                  –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —è–¥—Ä–∞
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card 
                    className={`cursor-pointer transition-all ${source === 'manual' ? 'ring-2 ring-blue-600 bg-blue-50' : 'hover:shadow-md'}`}
                    onClick={() => setSource('manual')}
                  >
                    <CardContent className="p-6 text-center">
                      <Icon name="Edit" size={48} className="mx-auto mb-3 text-blue-600" />
                      <h3 className="font-semibold text-lg mb-2">–í—Å—Ç–∞–≤–∏—Ç—å –∫–ª—é—á–∏ –≤—Ä—É—á–Ω—É—é</h3>
                      <p className="text-sm text-muted-foreground">–£–∂–µ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –∏–∑ Wordstat</p>
                    </CardContent>
                  </Card>

                  <Card 
                    className={`cursor-pointer transition-all ${source === 'website' ? 'ring-2 ring-purple-600 bg-purple-50' : 'hover:shadow-md'}`}
                    onClick={() => setSource('website')}
                  >
                    <CardContent className="p-6 text-center">
                      <Icon name="Globe" size={48} className="mx-auto mb-3 text-purple-600" />
                      <h3 className="font-semibold text-lg mb-2">–£–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç</h3>
                      <p className="text-sm text-muted-foreground">OpenAI –Ω–∞–π–¥—ë—Ç –±–∞–∑–∏—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
                    </CardContent>
                  </Card>
                </div>

                {source === 'manual' && (
                  <div className="space-y-2">
                    <Label>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)</Label>
                    <textarea
                      className="w-full min-h-[250px] p-3 border rounded-md resize-y font-mono text-sm"
                      placeholder="–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É&#10;–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –º–æ—Å–∫–≤–µ&#10;–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞&#10;–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤—Ç–æ—Ä–∏—á–∫—É"
                      value={manualKeywords}
                      onChange={(e) => setManualKeywords(e.target.value)}
                    />
                    <p className="text-xs text-muted-foreground">
                      üí° –í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã ‚Äî OpenAI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ—Ç
                    </p>
                  </div>
                )}

                {source === 'website' && (
                  <div className="space-y-2">
                    <Label>URL —Å–∞–π—Ç–∞</Label>
                    <Input
                      type="url"
                      placeholder="https://example.com"
                      value={websiteUrl}
                      onChange={(e) => setWebsiteUrl(e.target.value)}
                    />
                    <p className="text-xs text-muted-foreground">
                      ü§ñ OpenAI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–π—Ç, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–µ–º–∞—Ç–∏–∫—É –∏ —Å–æ–±–µ—Ä—ë—Ç –∫–ª—é—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    </p>
                  </div>
                )}

                <Button onClick={handleNext} className="w-full" size="lg">
                  –î–∞–ª–µ–µ <Icon name="ArrowRight" size={20} className="ml-2" />
                </Button>
              </CardContent>
            </>
          )}

          {step === 'cities' && (
            <>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon name="MapPin" size={24} />
                  –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
                </CardTitle>
                <CardDescription>
                  –î–ª—è –∫–∞–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏?
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ ({selectedCities.length})</Label>
                  <div className="flex flex-wrap gap-2 mt-2 min-h-[48px] p-2 border rounded-md bg-gray-50">
                    {selectedCities.map(city => (
                      <Badge key={city.id} className="bg-blue-600 text-white px-3 py-1.5">
                        {city.name}
                        <Icon 
                          name="X" 
                          size={14} 
                          className="ml-2 cursor-pointer hover:bg-blue-700 rounded-full" 
                          onClick={() => removeCity(city.id)}
                        />
                      </Badge>
                    ))}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥</Label>
                  <Input
                    placeholder="üîç –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ..."
                    value={citySearch}
                    onChange={(e) => setCitySearch(e.target.value)}
                  />
                  {citySearch && filteredCities.length > 0 && (
                    <div className="border rounded-md max-h-[200px] overflow-y-auto">
                      {filteredCities.map(city => (
                        <div
                          key={city.id}
                          className="p-3 hover:bg-blue-50 cursor-pointer border-b last:border-b-0"
                          onClick={() => addCity(city)}
                        >
                          {city.name}
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                <div className="flex gap-3">
                  <Button onClick={handleBack} variant="outline" className="w-full">
                    <Icon name="ArrowLeft" size={20} className="mr-2" /> –ù–∞–∑–∞–¥
                  </Button>
                  <Button onClick={handleNext} className="w-full">
                    –î–∞–ª–µ–µ <Icon name="ArrowRight" size={20} className="ml-2" />
                  </Button>
                </div>
              </CardContent>
            </>
          )}

          {step === 'goal' && (
            <>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon name="Target" size={24} />
                  –¶–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                </CardTitle>
                <CardDescription>
                  –î–ª—è —á–µ–≥–æ —Å–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏?
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card 
                    className={`cursor-pointer transition-all ${goal === 'context' ? 'ring-2 ring-orange-600 bg-orange-50' : 'hover:shadow-md'}`}
                    onClick={() => setGoal('context')}
                  >
                    <CardContent className="p-6 text-center">
                      <Icon name="MousePointerClick" size={48} className="mx-auto mb-3 text-orange-600" />
                      <h3 className="font-semibold text-lg mb-2">–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç</h3>
                      <p className="text-sm text-muted-foreground">–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞, –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</p>
                    </CardContent>
                  </Card>

                  <Card 
                    className={`cursor-pointer transition-all ${goal === 'seo' ? 'ring-2 ring-green-600 bg-green-50' : 'hover:shadow-md'}`}
                    onClick={() => setGoal('seo')}
                  >
                    <CardContent className="p-6 text-center">
                      <Icon name="TrendingUp" size={48} className="mx-auto mb-3 text-green-600" />
                      <h3 className="font-semibold text-lg mb-2">SEO-–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ</h3>
                      <p className="text-sm text-muted-foreground">–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ</p>
                    </CardContent>
                  </Card>
                </div>

                <div className="p-4 bg-blue-50 rounded-lg text-sm">
                  <p className="font-medium mb-2">
                    {goal === 'context' ? 'üí° –î–ª—è –î–∏—Ä–µ–∫—Ç–∞:' : 'üí° –î–ª—è SEO:'}
                  </p>
                  <p className="text-muted-foreground">
                    {goal === 'context' 
                      ? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ("–∫–∞–∫ –∫—É–ø–∏—Ç—å") –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ ‚Äî –æ–Ω–∏ –¥–æ—Ä–æ–≥–∏–µ –∏ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç –≤ –∑–∞—è–≤–∫–∏'
                      : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö ‚Äî –∏–∑ –Ω–∏—Ö –¥–µ–ª–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞'
                    }
                  </p>
                </div>

                <div className="flex gap-3">
                  <Button onClick={handleBack} variant="outline" className="w-full">
                    <Icon name="ArrowLeft" size={20} className="mr-2" /> –ù–∞–∑–∞–¥
                  </Button>
                  <Button onClick={handleNext} className="w-full">
                    –î–∞–ª–µ–µ <Icon name="ArrowRight" size={20} className="ml-2" />
                  </Button>
                </div>
              </CardContent>
            </>
          )}

          {step === 'intents' && (
            <>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon name="ListFilter" size={24} />
                  –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
                </CardTitle>
                <CardDescription>
                  –ö–∞–∫–∏–µ –∏–Ω—Ç–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è {goal === 'context' ? '–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã' : 'SEO'}?
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-3">
                  {INTENT_TYPES.map(intent => (
                    <Card 
                      key={intent.id}
                      className={`cursor-pointer transition-all ${
                        selectedIntents.includes(intent.id) ? 'ring-2 ring-blue-600 bg-blue-50' : 'hover:shadow-md'
                      }`}
                      onClick={() => toggleIntent(intent.id)}
                    >
                      <CardContent className="p-4 flex items-start gap-3">
                        <Checkbox 
                          checked={selectedIntents.includes(intent.id)}
                          className="mt-1"
                        />
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="text-2xl">{intent.emoji}</span>
                            <h3 className="font-semibold">{intent.label}</h3>
                          </div>
                          <p className="text-sm text-muted-foreground">{intent.description}</p>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>

                <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg text-sm">
                  <p className="font-medium text-yellow-800 mb-1">‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –î–∏—Ä–µ–∫—Ç–∞:</p>
                  <p className="text-yellow-700">
                    –û—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ <strong>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ</strong> –∏ <strong>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ</strong> ‚Äî –æ–Ω–∏ –¥–∞—é—Ç –∑–∞—è–≤–∫–∏. 
                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–∏–º –≤ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
                  </p>
                </div>

                <div className="flex gap-3">
                  <Button onClick={handleBack} variant="outline" className="w-full">
                    <Icon name="ArrowLeft" size={20} className="mr-2" /> –ù–∞–∑–∞–¥
                  </Button>
                  <Button onClick={handleNext} className="w-full" disabled={loading}>
                    {loading ? (
                      <>
                        <Icon name="Loader2" size={20} className="mr-2 animate-spin" />
                        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...
                      </>
                    ) : (
                      <>
                        <Icon name="Sparkles" size={20} className="mr-2" />
                        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </>
          )}

          {step === 'results' && (
            <>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon name="CheckCircle2" size={24} className="text-green-600" />
                  –ì–æ—Ç–æ–≤–æ!
                </CardTitle>
                <CardDescription>
                  OpenAI —Å–æ–∑–¥–∞–ª –∫–ª–∞—Å—Ç–µ—Ä—ã –∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="text-center p-8 bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg">
                  <Icon name="Sparkles" size={64} className="mx-auto mb-4 text-green-600" />
                  <h3 className="text-2xl font-bold mb-2">–ö–ª–∞—Å—Ç–µ—Ä—ã –≥–æ—Ç–æ–≤—ã!</h3>
                  <p className="text-muted-foreground mb-4">
                    –ù–∞–π–¥–µ–Ω–æ <strong>14 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</strong>, –≤—ã–¥–µ–ª–µ–Ω–æ <strong>12 –º–∏–Ω—É—Å-—Å–ª–æ–≤</strong>
                  </p>
                  <Button className="bg-green-600 hover:bg-green-700">
                    <Icon name="Download" size={20} className="mr-2" />
                    –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                  </Button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <Card className="bg-blue-50">
                    <CardContent className="p-4 text-center">
                      <div className="text-3xl font-bold text-blue-600">14</div>
                      <div className="text-sm text-muted-foreground">–ö–ª–∞—Å—Ç–µ—Ä–æ–≤</div>
                    </CardContent>
                  </Card>
                  <Card className="bg-green-50">
                    <CardContent className="p-4 text-center">
                      <div className="text-3xl font-bold text-green-600">62</div>
                      <div className="text-sm text-muted-foreground">–ö–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑</div>
                    </CardContent>
                  </Card>
                  <Card className="bg-red-50">
                    <CardContent className="p-4 text-center">
                      <div className="text-3xl font-bold text-red-600">12</div>
                      <div className="text-sm text-muted-foreground">–ú–∏–Ω—É—Å-—Å–ª–æ–≤</div>
                    </CardContent>
                  </Card>
                </div>

                <Button onClick={() => setStep('source')} variant="outline" className="w-full">
                  <Icon name="RotateCcw" size={20} className="mr-2" />
                  –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                </Button>
              </CardContent>
            </>
          )}
        </Card>
      </div>
    </div>
  );
}
