import { useState, useEffect, useMemo } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import Icon from '@/components/ui/icon';
import AppSidebar from '@/components/layout/AppSidebar';
import RSYAConnectionCard from '@/components/rsya/RSYAConnectionCard';
import RSYAFiltersManager from '@/components/rsya/RSYAFiltersManager';
import RSYACampaignSelector from '@/components/rsya/RSYACampaignSelector';
import RSYAPlatformsTable from '@/components/rsya/RSYAPlatformsTable';
import RSYAAutomationRules from '@/components/rsya/RSYAAutomationRules';
import func2url from '../../backend/func2url.json';

interface Filter {
  id: string;
  pattern: string;
}

interface GoalStats {
  conversions: number;
  conversion_rate: number;
  cost_per_goal: number;
}

interface PlatformStats {
  impressions: number;
  clicks: number;
  ctr: number;
  cost: number;
  cpc: number;
  conversions: number;
  conversion_rate: number;
  avg_position: number;
  goals?: Record<string, GoalStats>;
}

interface Platform {
  adgroup_id: string;
  adgroup_name: string;
  status: string;
  network_enabled: boolean;
  stats?: PlatformStats;
}

interface Goal {
  id: string;
  name: string;
  type: string;
}

interface Campaign {
  id: string;
  name: string;
  type: string;
  status: string;
  platforms?: Platform[];
  goals?: Goal[];
}

const DEFAULT_FILTERS: Filter[] = [
  { id: '1', pattern: 'com.' },
  { id: '2', pattern: 'dsp' },
  { id: '3', pattern: 'vnp' }
];

const YANDEX_DIRECT_URL = 'https://functions.poehali.dev/6b18ca7b-7f12-4758-a9db-4f774aaf2d23';
const RSYA_PROJECTS_URL = func2url['rsya-projects'] || 'https://functions.poehali.dev/08f68ba6-cbbb-4ca1-841f-185671e0757d';

export default function RSYACleaner() {
  const { id: projectId } = useParams<{ id: string }>();
  const [projectName, setProjectName] = useState<string>('');
  const [userId, setUserId] = useState<string>('');
  const [filters, setFilters] = useState<Filter[]>(DEFAULT_FILTERS);
  const [newFilter, setNewFilter] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [campaigns, setCampaigns] = useState<Campaign[]>([]);
  const [selectedCampaigns, setSelectedCampaigns] = useState<string[]>([]);
  const [selectedPlatforms, setSelectedPlatforms] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState<{ disabled: number; total: number } | null>(null);
  const [showCodeInput, setShowCodeInput] = useState(false);
  const [authCode, setAuthCode] = useState('');
  const [clientLogin, setClientLoginState] = useState('');
  
  const setClientLogin = (value: string) => {
    setClientLoginState(value);
    if (value.trim()) {
      localStorage.setItem('yandex_client_login', value.trim());
    } else {
      localStorage.removeItem('yandex_client_login');
    }
  };

  const [selectedGoal, setSelectedGoal] = useState<string>('all');
  const [viewMode, setViewMode] = useState<'campaigns' | 'platforms'>('platforms');
  const [apiError, setApiError] = useState<{code: number; message: string; detail: string} | null>(null);
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const [testPlatforms] = useState<Platform[]>([
    {
      adgroup_id: '1',
      adgroup_name: 'avito.ru',
      status: 'ACTIVE',
      network_enabled: true,
      stats: { impressions: 15234, clicks: 456, ctr: 2.99, cost: 12450, cpc: 27.3, conversions: 12, conversion_rate: 2.63, avg_position: 1.2 }
    },
    {
      adgroup_id: '2',
      adgroup_name: 'dzen.ru',
      status: 'ACTIVE',
      network_enabled: true,
      stats: { impressions: 98765, clicks: 1234, ctr: 1.25, cost: 45600, cpc: 37.0, conversions: 5, conversion_rate: 0.41, avg_position: 2.1 }
    },
    {
      adgroup_id: '3',
      adgroup_name: 'mail.ru',
      status: 'ACTIVE',
      network_enabled: true,
      stats: { impressions: 45678, clicks: 789, ctr: 1.73, cost: 28900, cpc: 36.6, conversions: 8, conversion_rate: 1.01, avg_position: 1.8 }
    },
    {
      adgroup_id: '4',
      adgroup_name: 'yandex.ru/news',
      status: 'ACTIVE',
      network_enabled: true,
      stats: { impressions: 67890, clicks: 1567, ctr: 2.31, cost: 56700, cpc: 36.2, conversions: 18, conversion_rate: 1.15, avg_position: 1.5 }
    },
    {
      adgroup_id: '5',
      adgroup_name: 'vk.com',
      status: 'ACTIVE',
      network_enabled: true,
      stats: { impressions: 123456, clicks: 2345, ctr: 1.90, cost: 89000, cpc: 38.0, conversions: 15, conversion_rate: 0.64, avg_position: 2.3 }
    }
  ]);
  const { toast } = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    const uid = localStorage.getItem('user_id') || '1';
    setUserId(uid);
    
    if (!projectId) {
      navigate('/rsya');
      return;
    }
    
    loadProject(uid, projectId);
  }, [projectId, navigate]);

  const loadProject = async (uid: string, pid: string) => {
    try {
      const response = await fetch(`${RSYA_PROJECTS_URL}?project_id=${pid}`, {
        method: 'GET',
        headers: { 'X-User-Id': uid }
      });
      
      if (!response.ok) {
        toast({ title: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', variant: 'destructive' });
        navigate('/rsya');
        return;
      }
      
      const data = await response.json();
      const project = data.project;
      
      setProjectName(project.name);
      
      if (project.yandex_token) {
        setIsConnected(true);
      } else {
        const hash = window.location.hash.substring(1);
        const hashParams = new URLSearchParams(hash);
        const accessToken = hashParams.get('access_token');
        
        if (accessToken) {
          await saveTokenToProject(uid, pid, accessToken);
          window.history.replaceState({}, document.title, window.location.pathname);
          setIsConnected(true);
        }
      }
    } catch (error) {
      toast({ title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞', variant: 'destructive' });
    }
  };

  const saveTokenToProject = async (uid: string, pid: string, token: string) => {
    try {
      await fetch(RSYA_PROJECTS_URL, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-User-Id': uid
        },
        body: JSON.stringify({
          project_id: parseInt(pid),
          yandex_token: token
        })
      });
    } catch (error) {
      console.error('Failed to save token:', error);
    }
  };

  const exchangeCodeForToken = async (code: string) => {
    try {
      setLoading(true);
      const response = await fetch(YANDEX_DIRECT_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'exchange_code', code })
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω');

      const data = await response.json();
      const token = data.access_token;
      
      localStorage.setItem('yandex_direct_token', token);
      await saveTokenToProject(userId, projectId!, token);
      window.history.replaceState({}, document.title, window.location.pathname);
      setIsConnected(true);
      
      toast({ title: '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ!', description: '–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω' });
    } catch (error) {
      toast({ title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞', variant: 'destructive' });
    } finally {
      setLoading(false);
    }
  };

  const loadCampaigns = async (token: string) => {
    setLoading(true);
    try {
      const actualLogin = localStorage.getItem('yandex_client_login');
      
      const url = YANDEX_DIRECT_URL;
      
      const headers: Record<string, string> = { 'X-Auth-Token': token };
      if (actualLogin) {
        headers['X-Client-Login'] = actualLogin;
      }
      
      toast({ 
        title: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', 
        description: '–ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏–∏, –ø–ª–æ—â–∞–¥–∫–∏ –∏ —Ü–µ–ª–∏ –∏–∑ Reports API'
      });
      
      const response = await fetch(url, {
        method: 'GET',
        headers
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π');

      const data = await response.json();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–∏ –∏–∑ API –î–∏—Ä–µ–∫—Ç–∞ (PriorityGoals)
      let goalsData: any[] = [];
      try {
        const goalsUrl = `${YANDEX_DIRECT_URL}?action=goals`;
        
        const goalsHeaders: Record<string, string> = { 'X-Auth-Token': token };
        if (actualLogin) {
          goalsHeaders['X-Client-Login'] = actualLogin;
        }
        
        const goalsResponse = await fetch(goalsUrl, {
          method: 'GET',
          headers: goalsHeaders
        });
        
        if (goalsResponse.ok) {
          const goalsResult = await goalsResponse.json();
          goalsData = goalsResult.goals || [];
          console.log('[DEBUG] Loaded goals from API:', goalsData);
          
          if (goalsData.length > 0) {
            toast({ 
              title: 'üéØ –¶–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 
              description: `–ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–π: ${goalsData.length}`
            });
          }
        }
      } catch (e) {
        console.warn('[WARN] Failed to load goals:', e);
      }
      
      if (data.error) {
        const errorCode = data.error_code;
        const errorTitle = data.error;
        const errorDetail = data.error_detail || '';
        
        console.error('Yandex API Error:', { errorCode, errorTitle, errorDetail, fullResponse: data });
        
        setApiError({
          code: errorCode,
          message: errorTitle,
          detail: errorDetail
        });
        
        let toastTitle = '‚ùå –û—à–∏–±–∫–∞ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç';
        let toastDescription = errorDetail || errorTitle;
        
        if (errorCode === 53) {
          toastTitle = '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π OAuth —Ç–æ–∫–µ–Ω';
          toastDescription = '–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ OAuth';
          setIsConnected(false);
        } else if (errorCode === 513) {
          toastTitle = 'üîê –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –î–∏—Ä–µ–∫—Ç—É';
        } else if (errorCode === 58) {
          toastTitle = '‚öôÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ';
        }
        
        toast({ 
          title: toastTitle, 
          description: toastDescription,
          variant: 'destructive',
          duration: 15000
        });
        setCampaigns([]);
        return;
      }
      
      setApiError(null);
      
      // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ü–µ–ª–∏ –∫–∞–º–ø–∞–Ω–∏—è–º –∏–∑ goalsData
      const campaignsWithGoals = (data.campaigns || []).map((campaign: Campaign) => {
        // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        const campaignGoals = goalsData
          .filter(goal => goal.campaigns?.some((c: any) => c.id === parseInt(campaign.id)))
          .map(goal => ({
            id: goal.id,
            name: goal.name || `–¶–µ–ª—å ${goal.id}`,
            type: 'conversion'
          }));
        
        return {
          ...campaign,
          goals: campaignGoals
        };
      });
      
      setCampaigns(campaignsWithGoals);
      
      const totalPlatforms = campaignsWithGoals.reduce((sum: number, c: Campaign) => sum + (c.platforms?.length || 0), 0);
      const totalGoals = campaignsWithGoals.reduce((sum: number, c: Campaign) => sum + (c.goals?.length || 0), 0);
      
      // –ï—Å–ª–∏ –ø–ª–æ—â–∞–¥–æ–∫ –Ω–µ—Ç (Reports API –≤–µ—Ä–Ω—É–ª 201 - –æ—Ç—á—ë—Ç –≤ –æ—á–µ—Ä–µ–¥–∏), –∂–¥—ë–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–Ω–æ–≤–∞
      if (totalPlatforms === 0 && campaignsWithGoals.length > 0) {
        toast({ 
          title: '‚è≥ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞...', 
          description: 'Reports API –≥–æ—Ç–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫...'
        });
        
        setTimeout(async () => {
          try {
            const retryResponse = await fetch(url, {
              method: 'GET',
              headers
            });
            
            if (retryResponse.ok) {
              const retryData = await retryResponse.json();
              
              if (!retryData.error) {
                const retryCampaignsWithGoals = (retryData.campaigns || []).map((campaign: Campaign) => {
                  const campaignGoals = goalsData
                    .filter(goal => goal.campaigns?.some((c: any) => c.id === parseInt(campaign.id)))
                    .map(goal => ({
                      id: goal.id,
                      name: goal.name || `–¶–µ–ª—å ${goal.id}`,
                      type: 'conversion'
                    }));
                  
                  return {
                    ...campaign,
                    goals: campaignGoals
                  };
                });
                
                setCampaigns(retryCampaignsWithGoals);
                
                const retryTotalPlatforms = retryCampaignsWithGoals.reduce((sum: number, c: Campaign) => sum + (c.platforms?.length || 0), 0);
                
                toast({ 
                  title: '‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 
                  description: `–ö–∞–º–ø–∞–Ω–∏–π: ${retryCampaignsWithGoals.length} ‚Ä¢ –ü–ª–æ—â–∞–¥–æ–∫: ${retryTotalPlatforms} ‚Ä¢ –¶–µ–ª–µ–π: ${totalGoals}`
                });
              }
            }
          } catch (e) {
            console.warn('[WARN] Retry failed:', e);
          }
        }, 3000);
      } else {
        toast({ 
          title: '‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 
          description: `–ö–∞–º–ø–∞–Ω–∏–π: ${data.campaigns?.length || 0} ‚Ä¢ –ü–ª–æ—â–∞–¥–æ–∫: ${totalPlatforms} ‚Ä¢ –¶–µ–ª–µ–π: ${totalGoals}`
        });
      }
    } catch (error) {
      toast({ title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π', description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π', variant: 'destructive' });
    } finally {
      setLoading(false);
    }
  };

  const loadGoalsFromDirect = async (token: string) => {
    console.log('üéØ loadGoalsFromDirect called');
    try {
      const clientLogin = localStorage.getItem('yandex_client_login') || undefined;
      
      toast({ 
        title: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–ª–µ–π...', 
        description: '–ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç'
      });
      
      const url = `${YANDEX_DIRECT_URL}?action=goals${clientLogin ? `&client_login=${clientLogin}` : ''}`;
      
      const response = await fetch(url, {
        method: 'GET',
        headers: { 'X-Auth-Token': token }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();
      
      if (data.error) {
        toast({ 
          title: '‚ùå –û—à–∏–±–∫–∞ API –î–∏—Ä–µ–∫—Ç', 
          description: data.error,
          variant: 'destructive'
        });
        return;
      }
      
      const goals = data.goals || [];
      console.log('‚úÖ Goals loaded from Direct:', goals);
      
      toast({ 
        title: '‚úÖ –¶–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 
        description: `–ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–π: ${goals.length}`
      });
      
    } catch (error) {
      toast({ 
        title: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–π', 
        description: String(error), 
        variant: 'destructive' 
      });
    }
  };

  const checkYandexConnection = async () => {
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    const userId = user.id;
    
    if (!userId) return;
    
    try {
      const response = await fetch(func2url['yandex-oauth'], {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-Id': userId
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.connected && data.access_token) {
          localStorage.setItem('yandex_direct_token', data.access_token);
          setIsConnected(true);
          toast({ title: '‚úÖ –Ø–Ω–¥–µ–∫—Å –ø–æ–¥–∫–ª—é—á–µ–Ω', description: `–ê–∫–∫–∞—É–Ω—Ç: ${data.yandex_login}` });
          loadCampaigns(data.access_token);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  };

  const handleConnect = () => {
    const clientId = 'fa264103fca547b7baa436de1a416fbe';
    const authUrl = `https://oauth.yandex.ru/authorize?response_type=token&client_id=${clientId}`;
    
    window.open(authUrl, '_blank');
    setShowCodeInput(true);
    
    toast({ 
      title: '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω', 
      description: '–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ URL (#access_token=...) –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ',
      duration: 15000
    });
  };

  const handleCodeSubmit = async () => {
    if (!authCode.trim()) {
      toast({ title: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ —Ç–æ–∫–µ–Ω', description: '–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ OAuth –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞', variant: 'destructive' });
      return;
    }
    
    setLoading(true);
    try {
      const token = authCode.trim();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (clientLogin.trim()) {
        localStorage.setItem('yandex_client_login', clientLogin.trim());
      } else {
        localStorage.removeItem('yandex_client_login');
      }
      
      // –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ - —Å—á–∏—Ç–∞–µ–º –≥–æ—Ç–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
      if (token.length > 10) {
        localStorage.setItem('yandex_direct_token', token);
        await saveTokenToProject(userId, projectId!, token);
        setIsConnected(true);
        setShowCodeInput(false);
        setAuthCode('');
        toast({ title: '‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω', description: '–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω' });
      } else {
        // OAuth –∫–æ–¥—ã –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ
        await exchangeCodeForToken(token);
        setShowCodeInput(false);
        setAuthCode('');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCreateTestCampaign = async () => {
    const token = localStorage.getItem('yandex_direct_token');
    const savedLogin = localStorage.getItem('yandex_client_login');
    
    if (!token) {
      toast({ title: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', variant: 'destructive' });
      return;
    }
    
    setLoading(true);
    try {
      const response = await fetch(YANDEX_DIRECT_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          action: 'create_test_campaign', 
          token,
          client_login: savedLogin 
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        toast({ title: '‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!', description: `ID: ${data.campaign_id}` });
        await loadCampaigns(token);
      } else {
        toast({ 
          title: '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏', 
          description: data.error_detail || data.error,
          variant: 'destructive',
          duration: 10000
        });
      }
    } catch (error) {
      toast({ title: '–û—à–∏–±–∫–∞', description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é', variant: 'destructive' });
    } finally {
      setLoading(false);
    }
  };

  const handleDisconnect = () => {
    localStorage.removeItem('yandex_direct_token');
    localStorage.removeItem('yandex_client_login');
    setIsConnected(false);
    setCampaigns([]);
    setSelectedCampaigns([]);
    setResults(null);
    setClientLoginState('');
    toast({ title: '–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –æ—Ç–∫–ª—é—á—ë–Ω' });
  };

  const allPlatforms = useMemo(() => {
    return campaigns.flatMap(c => 
      (c.platforms || []).map(p => ({
        ...p,
        campaign_id: c.id,
        campaign_name: c.name
      }))
    );
  }, [campaigns]);

  const toggleCampaign = (campaignId: string) => {
    setSelectedCampaigns(prev => 
      prev.includes(campaignId) ? prev.filter(id => id !== campaignId) : [...prev, campaignId]
    );
  };

  const selectAllCampaigns = () => setSelectedCampaigns(campaigns.map(c => c.id));
  const deselectAllCampaigns = () => setSelectedCampaigns([]);

  const togglePlatform = (platformId: string) => {
    setSelectedPlatforms(prev =>
      prev.includes(platformId) ? prev.filter(id => id !== platformId) : [...prev, platformId]
    );
  };

  const selectAllPlatforms = () => setSelectedPlatforms(allPlatforms.map(p => p.adgroup_id));
  const deselectAllPlatforms = () => setSelectedPlatforms([]);

  const addFilter = () => {
    if (!newFilter.trim()) {
      toast({ title: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω —Ñ–∏–ª—å—Ç—Ä–∞', variant: 'destructive' });
      return;
    }
    const filter: Filter = { id: Date.now().toString(), pattern: newFilter.trim() };
    setFilters([...filters, filter]);
    setNewFilter('');
    toast({ title: '‚úÖ –§–∏–ª—å—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω', description: `–ü–∞—Ç—Ç–µ—Ä–Ω: ${filter.pattern}` });
  };

  const removeFilter = (id: string) => {
    setFilters(filters.filter(f => f.id !== id));
    toast({ title: '–§–∏–ª—å—Ç—Ä —É–¥–∞–ª—ë–Ω' });
  };

  const handleClean = async () => {
    if (selectedCampaigns.length === 0) {
      toast({ title: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞–º–ø–∞–Ω–∏—é', variant: 'destructive' });
      return;
    }
    if (filters.length === 0) {
      toast({ title: '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä', variant: 'destructive' });
      return;
    }

    const token = localStorage.getItem('yandex_direct_token');
    if (!token) {
      toast({ title: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', variant: 'destructive' });
      return;
    }

    setLoading(true);
    toast({ title: 'üöÄ –ó–∞–ø—É—Å–∫ —á–∏—Å—Ç–∫–∏...', description: `–ü—Ä–∏–º–µ–Ω—è–µ–º ${filters.length} —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ ${selectedCampaigns.length} –∫–∞–º–ø–∞–Ω–∏—è–º` });

    try {
      const response = await fetch(YANDEX_DIRECT_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'X-Auth-Token': token },
        body: JSON.stringify({ campaignIds: selectedCampaigns, filters: filters.map(f => f.pattern) })
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —á–∏—Å—Ç–∫–∏');

      const data = await response.json();
      setResults(data);
      toast({ title: '‚úÖ –ß–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', description: `–û—Ç–∫–ª—é—á–µ–Ω–æ ${data.disabled} –ø–ª–æ—â–∞–¥–æ–∫ –∏–∑ ${data.total}` });
    } catch (error) {
      toast({ title: '–û—à–∏–±–∫–∞', description: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–∏—Å—Ç–∫—É –ø–ª–æ—â–∞–¥–æ–∫', variant: 'destructive' });
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <AppSidebar />
      <div className="min-h-screen bg-gradient-to-br from-emerald-50/50 via-green-50/30 to-teal-50/50 p-8 ml-64">
        <div className="max-w-5xl mx-auto space-y-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <Button
              onClick={() => navigate('/rsya')}
              variant="outline"
              size="icon"
            >
              <Icon name="ArrowLeft" className="h-5 w-5" />
            </Button>
            <div>
              <h1 className="text-4xl font-bold text-slate-900 mb-2">{projectName || '–ß–∏—Å—Ç–∫–∞ –†–°–Ø'}</h1>
              <p className="text-lg text-slate-600">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—Ü–µ–ª–µ–≤—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤ –†–µ–∫–ª–∞–º–Ω–æ–π —Å–µ—Ç–∏ –Ø–Ω–¥–µ–∫—Å–∞</p>
            </div>
          </div>
          <Button
            onClick={() => navigate(`/rsya/${projectId}/settings`)}
            variant="outline"
            size="lg"
          >
            <Icon name="Settings" className="mr-2 h-5 w-5" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
        </div>

        <RSYAConnectionCard
          isConnected={isConnected}
          showCodeInput={showCodeInput}
          authCode={authCode}
          clientLogin={clientLogin}
          setAuthCode={setAuthCode}
          setClientLogin={setClientLogin}
          onConnect={handleConnect}
          onDisconnect={handleDisconnect}
          onToggleCodeInput={() => setShowCodeInput(!showCodeInput)}
          onSubmitCode={handleCodeSubmit}
        />

        {isConnected && (
          <>
            <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200 shadow-md">
              <CardContent className="pt-6">
                <div className="flex items-center justify-between gap-4">
                  <div className="flex items-center gap-3">
                    <div className="p-3 bg-blue-100 rounded-full">
                      <Icon name="Target" className="h-6 w-6 text-blue-600" />
                    </div>
                    <div>
                      <h3 className="font-bold text-blue-900">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π</h3>
                      <p className="text-sm text-blue-700">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Ü–µ–ª–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã</p>
                    </div>
                  </div>
                  <Button 
                    onClick={() => {
                      const token = localStorage.getItem('yandex_direct_token');
                      if (token) {
                        loadCampaigns(token);
                        toast({ title: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...', description: '–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç' });
                      }
                    }}
                    disabled={loading || campaigns.length > 0}
                    className="bg-blue-600 hover:bg-blue-700 text-white shadow-md"
                    size="lg"
                  >
                    {loading ? (
                      <>
                        <Icon name="Loader2" className="mr-2 h-5 w-5 animate-spin" />
                        –ó–∞–≥—Ä—É–∑–∫–∞...
                      </>
                    ) : campaigns.length > 0 ? (
                      <>
                        <Icon name="CheckCircle2" className="mr-2 h-5 w-5" />
                        –ó–∞–≥—Ä—É–∂–µ–Ω–æ ({campaigns.length})
                      </>
                    ) : (
                      <>
                        <Icon name="Download" className="mr-2 h-5 w-5" />
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>

            {apiError && apiError.code === 513 && (
              <Card className="bg-orange-50 border-orange-300 shadow-lg">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <div className="p-3 bg-orange-100 rounded-full">
                      <Icon name="UserX" className="h-6 w-6 text-orange-600" />
                    </div>
                    <div className="flex-1">
                      <h3 className="text-lg font-bold text-orange-900 mb-2">üîê –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –î–∏—Ä–µ–∫—Ç—É</h3>
                      <p className="text-sm text-orange-800 mb-4">
                        {apiError.detail}
                      </p>
                      
                      <div className="bg-white rounded-lg p-4 mb-4 border border-orange-200">
                        <h4 className="font-semibold text-slate-900 mb-3 flex items-center gap-2">
                          <Icon name="Lightbulb" className="h-4 w-4 text-orange-600" />
                          –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                        </h4>
                        <ul className="space-y-3 text-sm">
                          <li className="flex items-start gap-2">
                            <Icon name="Circle" className="h-2 w-2 mt-1.5 text-orange-600 flex-shrink-0" />
                            <div>
                              <strong className="text-slate-900">–ê–≥–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç:</strong>
                              <p className="text-slate-700">–ï—Å–ª–∏ –≤—ã –∞–≥–µ–Ω—Ç ‚Äî —É–∫–∞–∂–∏—Ç–µ <code className="bg-slate-100 px-1 rounded">Client-Login</code> –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏</p>
                            </div>
                          </li>
                          <li className="flex items-start gap-2">
                            <Icon name="Circle" className="h-2 w-2 mt-1.5 text-orange-600 flex-shrink-0" />
                            <div>
                              <strong className="text-slate-900">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –î–∏—Ä–µ–∫—Ç—É:</strong>
                              <p className="text-slate-700">–ó–∞–π–¥–∏—Ç–µ –Ω–∞ <a href="https://direct.yandex.ru" target="_blank" className="text-blue-600 underline">direct.yandex.ru</a> –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</p>
                            </div>
                          </li>
                          <li className="flex items-start gap-2">
                            <Icon name="Circle" className="h-2 w-2 mt-1.5 text-orange-600 flex-shrink-0" />
                            <div>
                              <strong className="text-slate-900">–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞:</strong>
                              <p className="text-slate-700">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è Client-Login (–±–µ–∑ @yandex.ru)</p>
                            </div>
                          </li>
                        </ul>
                      </div>
                      
                      <div className="flex gap-3">
                        <Button 
                          onClick={() => {
                            handleDisconnect();
                            setShowCodeInput(true);
                          }}
                          className="bg-orange-600 hover:bg-orange-700 text-white"
                        >
                          <Icon name="Settings" className="mr-2 h-4 w-4" />
                          –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å Client-Login
                        </Button>
                        <Button 
                          onClick={() => window.open('https://direct.yandex.ru', '_blank')}
                          variant="outline"
                        >
                          <Icon name="ExternalLink" className="mr-2 h-4 w-4" />
                          –û—Ç–∫—Ä—ã—Ç—å –î–∏—Ä–µ–∫—Ç
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
            
            {apiError && apiError.code === 58 && (
              <Card className="bg-purple-50 border-purple-300 shadow-lg">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <div className="p-3 bg-purple-100 rounded-full">
                      <Icon name="FileKey" className="h-6 w-6 text-purple-600" />
                    </div>
                    <div className="flex-1">
                      <h3 className="text-lg font-bold text-purple-900 mb-2">‚öôÔ∏è OAuth –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Production API</h3>
                      <p className="text-sm text-purple-800 mb-4">
                        {apiError.detail}
                      </p>
                      
                      <div className="bg-white rounded-lg p-4 mb-4 border border-purple-200">
                        <h4 className="font-semibold text-slate-900 mb-3 flex items-center gap-2">
                          <Icon name="ClipboardList" className="h-4 w-4 text-purple-600" />
                          –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Production API:
                        </h4>
                        <ol className="list-decimal list-inside space-y-3 text-sm text-slate-700">
                          <li>
                            –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞{' '}
                            <a 
                              href="https://direct.yandex.ru/registered/main.pl?cmd=apiSettings" 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:text-blue-800 underline font-medium"
                            >
                              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –≤ –î–∏—Ä–µ–∫—Ç–µ
                            </a>
                          </li>
                          <li>
                            –í —Ä–∞–∑–¥–µ–ª–µ <strong>"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"</strong> –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                          </li>
                          <li>
                            –ù–∞–∂–º–∏—Ç–µ <strong>"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø"</strong>
                          </li>
                          <li>
                            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:
                            <ul className="ml-6 mt-1 space-y-1 text-xs">
                              <li>‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
                              <li>‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ (–∑–∞—á–µ–º –Ω—É–∂–µ–Ω API)</li>
                              <li>‚Ä¢ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π)</li>
                            </ul>
                          </li>
                          <li>
                            –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞ (–æ–±—ã—á–Ω–æ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è)
                          </li>
                          <li>
                            –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å
                          </li>
                        </ol>
                      </div>
                      
                      <div className="bg-amber-50 border border-amber-200 rounded p-3 mb-4">
                        <p className="text-xs text-amber-900 flex items-start gap-2">
                          <Icon name="Lightbulb" className="h-4 w-4 mt-0.5 flex-shrink-0 text-amber-600" />
                          <span>
                            <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ–∫–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º <strong>–ü–µ—Å–æ—á–Ω–∏—Ü–∞</strong> –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
                          </span>
                        </p>
                      </div>
                      
                      <div className="flex gap-3">
                        <Button 
                          onClick={() => window.open('https://direct.yandex.ru/registered/main.pl?cmd=apiSettings', '_blank')}
                          className="bg-purple-600 hover:bg-purple-700 text-white"
                        >
                          <Icon name="ExternalLink" className="mr-2 h-4 w-4" />
                          –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          

          
            {viewMode === 'campaigns' && (
              <RSYAFiltersManager
                filters={filters}
                newFilter={newFilter}
                setNewFilter={setNewFilter}
                onAddFilter={addFilter}
                onRemoveFilter={removeFilter}
              />
            )}

            {campaigns.length > 0 && (
              <Card className="bg-white shadow-lg">
                <CardContent className="pt-6">
                  <div className="flex items-center justify-between gap-4 mb-6">
                    <div className="flex items-center justify-center gap-4 flex-1">
                      <button
                        onClick={() => setViewMode('campaigns')}
                        className={`flex items-center gap-2 px-6 py-3 rounded-lg font-semibold transition-all ${
                          viewMode === 'campaigns'
                            ? 'bg-blue-600 text-white shadow-md'
                            : 'bg-slate-100 text-slate-700 hover:bg-slate-200'
                        }`}
                      >
                        <Icon name="Target" className="h-5 w-5" />
                        –ü–æ –∫–∞–º–ø–∞–Ω–∏—è–º
                      </button>
                      <button
                        onClick={() => setViewMode('platforms')}
                        className={`flex items-center gap-2 px-6 py-3 rounded-lg font-semibold transition-all ${
                          viewMode === 'platforms'
                            ? 'bg-blue-600 text-white shadow-md'
                            : 'bg-slate-100 text-slate-700 hover:bg-slate-200'
                        }`}
                      >
                        <Icon name="Table" className="h-5 w-5" />
                        –í—Å–µ –ø–ª–æ—â–∞–¥–∫–∏ ({allPlatforms.length})
                      </button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {campaigns.length > 0 && (
              <Card className="bg-gradient-to-r from-green-50 to-emerald-50 border-green-200 shadow-md">
                <CardContent className="pt-6">
                  <div className="flex items-center justify-between gap-4">
                    <div className="flex items-center gap-3">
                      <div className="p-3 bg-green-100 rounded-full">
                        <Icon name="Target" className="h-6 w-6 text-green-600" />
                      </div>
                      <div>
                        <h3 className="font-bold text-green-900">–¶–µ–ª–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</h3>
                        <p className="text-sm text-green-700">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ü–µ–ª–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
                      </div>
                    </div>
                    <Button 
                      onClick={() => {
                        const token = localStorage.getItem('yandex_direct_token');
                        if (token) loadGoalsFromDirect(token);
                      }}
                      className="bg-green-600 hover:bg-green-700 text-white shadow-md"
                      size="lg"
                    >
                      <Icon name="Download" className="mr-2 h-5 w-5" />
                      –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–∏
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}

            {campaigns.length > 0 && viewMode === 'campaigns' && (
              <RSYACampaignSelector
                campaigns={campaigns}
                selectedCampaigns={selectedCampaigns}
                onToggleCampaign={toggleCampaign}
                onSelectAll={selectAllCampaigns}
                onDeselectAll={deselectAllCampaigns}
                selectedGoal={selectedGoal}
                onSelectGoal={setSelectedGoal}
              />
            )}

            {viewMode === 'platforms' && (
              <>
                <RSYAAutomationRules
                  onApplyRule={(rule) => {
                    let matchedPlatforms = allPlatforms;
                    
                    rule.conditions.forEach(cond => {
                      if (cond.type === 'pattern' && cond.pattern) {
                        matchedPlatforms = matchedPlatforms.filter(p => 
                          p.adgroup_name.toLowerCase().includes(cond.pattern!.toLowerCase())
                        );
                      } else if (cond.type === 'metric' && cond.field && cond.operator && cond.value !== undefined) {
                        matchedPlatforms = matchedPlatforms.filter(p => {
                          if (!p.stats) return false;
                          const val = p.stats[cond.field!];
                          if (val === undefined) return false;
                          
                          switch (cond.operator) {
                            case '>=': return val >= cond.value!;
                            case '<=': return val <= cond.value!;
                            case '>': return val > cond.value!;
                            case '<': return val < cond.value!;
                            case '=': return val === cond.value!;
                            default: return false;
                          }
                        });
                      }
                    });
                    
                    const matchedIds = matchedPlatforms.map(p => p.adgroup_id);
                    matchedIds.forEach(id => {
                      if (!selectedPlatforms.includes(id)) {
                        togglePlatform(id);
                      }
                    });
                    
                    toast({ 
                      title: `‚úÖ –ü—Ä–∞–≤–∏–ª–æ "${rule.name}" –ø—Ä–∏–º–µ–Ω–µ–Ω–æ`, 
                      description: `–í—ã–±—Ä–∞–Ω–æ –ø–ª–æ—â–∞–¥–æ–∫: ${matchedIds.length}` 
                    });
                  }}
                />
                
                <RSYAPlatformsTable
                  platforms={campaigns.length > 0 ? allPlatforms : testPlatforms}
                  selectedPlatforms={selectedPlatforms}
                  onTogglePlatform={togglePlatform}
                  onSelectAll={selectAllPlatforms}
                  onDeselectAll={deselectAllPlatforms}
                  onMassDisable={() => {
                    toast({ 
                      title: 'üöÄ –ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ', 
                      description: `–ë—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ ${selectedPlatforms.length} –ø–ª–æ—â–∞–¥–æ–∫` 
                    });
                  }}
                />
              </>
            )}

            {campaigns.length > 0 && (
              <Card>
                <CardContent className="pt-6">
                  <Button
                    onClick={handleClean}
                    disabled={loading || (viewMode === 'campaigns' ? selectedCampaigns.length === 0 : selectedPlatforms.length === 0) || filters.length === 0}
                    size="lg"
                    className="w-full bg-emerald-500 hover:bg-emerald-600 text-white"
                  >
                    {loading ? (
                      <>
                        <Icon name="Loader2" className="mr-2 h-5 w-5 animate-spin" />
                        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–∏—Å—Ç–∫–∞...
                      </>
                    ) : (
                      <>
                        <Icon name="Sparkles" className="mr-2 h-5 w-5" />
                        {viewMode === 'campaigns' 
                          ? `–ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∏—Å—Ç–∫—É (${selectedCampaigns.length} –∫–∞–º–ø–∞–Ω–∏–π)` 
                          : `–û—Ç–∫–ª—é—á–∏—Ç—å –ø–ª–æ—â–∞–¥–∫–∏ (${selectedPlatforms.length})`}
                      </>
                    )}
                  </Button>
                </CardContent>
              </Card>
            )}

            {results && (
              <Card className="bg-gradient-to-br from-emerald-50 to-teal-50 border-emerald-200">
                <CardContent className="pt-6">
                  <div className="text-center space-y-2">
                    <Icon name="CheckCircle2" className="h-12 w-12 text-emerald-600 mx-auto" />
                    <h3 className="text-2xl font-bold text-emerald-900">–ß–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h3>
                    <p className="text-lg text-emerald-700">
                      –û—Ç–∫–ª—é—á–µ–Ω–æ <span className="font-bold">{results.disabled}</span> –ø–ª–æ—â–∞–¥–æ–∫ –∏–∑ <span className="font-bold">{results.total}</span>
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}
          </>
        )}
        </div>
      </div>
    </>
  );
}